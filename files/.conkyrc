## Конфигурационный файл .conkyrc
## ВНИМАНИЕ: Этот конфиг скорее всего не полностью подойдет к вашему компьютеру.
## Этот файл хорошо комментирован и вам не составит труда заменить некоторые параметры (имена жестких дисков, сетевых интерфейсов и тд.)
## Полное описание настроек .conkyrc вы можете найти на http://zenux.ru/articles/8/

## Эти строчки нужны для корректного отображения окна Conky. Не меняйте их.
background no
own_window yes
own_window_type override
own_window_transparent yes
own_window_hints undecorated,below,sticky,skip_taskbar,skip_pager
## Используем XFT шрифты. Выбор не велик - Terminus, Vera, Sans и Mono
## Можно закоментить следующие две строчки, тогда можно будет указать обычные шрифты, но
## В таком случае вы русские символы скорее-всего не будут правильно отображаться
use_xft yes
## Шрифт Terminus. Вы можете указать другой, например, Sans так:
## xftfont Sans:size=8
xftfont Terminus:size=8
## Для улучшения отрисовки включаем двойной буфер
double_buffer yes
## Для улучшения читабельности включаем тени
draw_shades yes
## Умолчальные цвета для текста
default_color white
default_shade_color black
default_outline_color blue
## Задаем позицию для окна. Conky будет отображаться в левом верхнем углу
## Можно изменить на top_right, bottom_left, bottom_right
alignment top_left
## Делаем небольшие отступы с краю
gap_x 10
gap_y 40
## Так указывается шрифт, если у вас отключено use_xft yes. Для определения правильного имени шрифта используйте утилиту xfontsel
## Так шрифт можно указывать, если не используется use_xft. Но без use_xft не отображаются корректно русские буквы
## Поэтому пока закоментим
## font  -schumacher-clean-medium-r-*-*-12-*-*-*-*-*-*-*
## Если следующую строчку закоментить, Conky будет показывать количество используемой оперативной памяти без учета буферов
## У меня, например, без этой строчки Conky показывает не больше 500МБ занятой памяти, 
## а с этой строчкой - 3ГБ - этому сильнее верится :) 
## Но, вариант с учетом кэша, тоже не совсем корректен: кэшируемую память принято считать свободной,
## так что если хотите - закоментируйте следующую строку
#no_buffers no
## -------------------------------------------------------------------------------
## -------------------------------------------------------------------------------
## Все, что идет после TEXT, будет непосредственно отрисовываться на экране
TEXT
## Версия ядра
Ядро: ${kernel}
## Дата и время
Время: ${time}
## Аптайм
Аптайм: $uptime
## -------------------------------
## Использование процессора %
## Если у вас двухядерный процессор, добавьте дополнительную строчку и $cpu% замените на ${cpu 1}%, где 1 - номер ядра
##  ${color a1ccea}  - эта функция указывает цвет последующего текста. Вы можете изменить на свой

${color a1ccea}ЦП1 : ${cpu 1}% 
${color a1ccea}ЦП2 : ${cpu 2}% 
## Не забудьте после изменить цвет обратно на белый #{color ffffff}
## ${cpubar 3,140}  рисует полоску загруженности процессора высотой в 3 и шириной в 140 пикселей
${color ffffff}${cpubar 3,140}
##Рисуем график нагрузки проца
## ${cpugraph 20,140 000000 ffffff} рисует график загруженности процессора, высотой в 20 и шириной в 140 пикселей,
## который закрашен градиентом от белого к черному. Если вы хотите закрашивать график обычным цветом, уберите 00000 и fffff
##${cpugraph 20,140 000000 ffffff}
## Показываем три процесса, которые сильнее всего нагружают процессор. Первый окрашиваем оранжевым цветом.
##Highest CPU:
##${color ff9000}${top name 1} ${top cpu 1}%
## Возвращаем цвет текста к белому
##${color ffffff}${top name 2} ${top cpu 2}%
##${top name 3} ${top cpu 3}%
## Использование памяти в процентах

${color a1ccea}ОЗУ: $memperc% используется
## Пишем, сколько занято памяти и сколько всего
## Внимание: вам может показаться, что памяти используется подозрительно мало
## Такой результат получается из-за особенностей использования динамических библиотек
## Например, если две программы используют 20мб библиотеку, это не значит, что каждая 
## из них занимает +20мб ОЗУ
## Поэтому других системных мониторах результат может отличаться
     ${color ffffff}$mem из $memmax
## Рисуем полоску использования памяти высотой 3 и шириной 140
${membar 3,140}
## Выводим информацию по использованию сети

${color a1ccea}Сеть:
## Исходящий трафик для интерфейса wlan0. Если у вас сетевой интерфейс называется по-другому, измените wlan0 на свое
## Если у вас больше одного сетевого интерфейса, просто скопируйте следующие строчки и измените wlan0 на свое
${color ffffff}Исход.: ${upspeed wlan0}/s
## График исходящего трафика
${upspeedgraph wlan0 20,140  000000 ffffff}
# Входящий трафик
Вход.: ${downspeed wlan0}/s
## График для входящего трафика
${downspeedgraph wlan0 20,140  000000 ffffff}
## Информация о файловых системах
## Тут показывается информация для разделов /, /home, /files и /files_archive
## Эти разделы используются на моем компьютере, поэтому измените везде /files и /files_archive на ваши точки монтирования

${color a1ccea}Файловые системы:${color ffffff}
## сколько использовано на корневом разделе и сколько места всего
 / ${fs_used /}/${fs_size /}
## полоска для корневого раздела
${fs_bar 3,140 /}
 /home ${fs_used /home}/${fs_size /home}
${fs_bar 3,140 /home}
 /windows ${fs_used /windows}/${fs_size /windows}
${fs_bar 3,140 /windows}
## Температура процессора, системной платы, жестких дисков и видеокарты (только для NVidia!)
## Внимание: для отображения температуры, у вас должны быть настроены пакеты
## lm_sensors, hddtemp и conky должен быть собран с поддержкой nvidia
## О настройке мониторинга температуры смотрите на http://open-way.org

${color a1ccea}Температура:
## Температура процессора (temp1 или temp2 и тд - проверять по биосу)
## Тут просто выполняется команда sensors и из ее вывода вырезается информация о температуре с датчика temp1
## На моем компьютере temp1 показывает температуру процессора. У вас может быть по-другому.
## Поэтому, вы должны сверить данные с sensors с показателями температуры в BIOS
${color ffffff}ЦП1      : ${execi 2 sensors | grep "Core 0" | cut -c 17-19}°С
## Температура чипа системной платы. У меня за сис-плату отвечает temp2, у вас может быть по-другому, сверяйтесь с биосом, это не сложно
## Или читайте дополнительную информацию на http://open-way.org
ЦП2      : ${execi 2 sensors | grep "Core 1" | cut -c 17-19}°С
## Температура жестких дисков
## Если у вас больше или меньше жестких дисков, или называются их устройства по-другому, измените на свое
## Информация о температуре получается от утилиты hddtemp. Эту утилиту может использовать только root
## Поэтому, чтобы ее мог использовать обычный пользователь, надо изменить ее исполняемому файлу права
## Как это сделать, читайте на http://open-way.org
/dev/sda : +${execi 2 hddtemp /dev/sda | cut -c 35-36 }°С
## Погода
## Я не стал заморачиваться с RSS (он кривовато работает) и сделал просто
## С помощью wget каждые 600 секунд скачивается маленькая картинка (4кб) с сайта гисметео
## Затем она отображается в окне Conky
## Тут ссылка на картинку для Тулы. Получить ссылку для вашего города вы можете по адресу 
## http://informer.gismeteo.ru/ в разделе "графические информеры"

${color a1ccea}Погода:
${color ffffff}${execpi 3600 ~/weather.sh}
